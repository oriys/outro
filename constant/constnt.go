package constant

const (
	// https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4
	ConstantClass              uint8 = 7
	ConstantFieldRef           uint8 = 9
	ConstantMethodRef          uint8 = 10
	ConstantInterfaceMethodRef uint8 = 11
	ConstantString             uint8 = 8
	ConstantInteger            uint8 = 3
	ConstantFloat              uint8 = 4
	ConstantLong               uint8 = 5
	ConstantDouble             uint8 = 6
	ConstantNameAndType        uint8 = 12
	ConstantUtf8               uint8 = 1
	ConstantMethodHandle       uint8 = 15
	ConstantMethodType         uint8 = 16
	ConstantInvokeDynamic      uint8 = 18
)

type AccessFlag uint16

// Field access and property flags

const (
	FIELD_ACC_PUBLIC    AccessFlag = 0x0001 //Declared public; may be accessed from outside its package.
	FIELD_ACC_PRIVATE   AccessFlag = 0x0002 // Declared private; accessible only within the defining class and other classes belonging to the same nest (ยง5.4.4).
	FIELD_ACC_PROTECTED AccessFlag = 0x0004 //Declared protected; may be accessed within subclasses.
	FIELD_ACC_STATIC    AccessFlag = 0x0008 //Declared static.
	FIELD_ACC_FINAL     AccessFlag = 0x0010 //Declared final; never directly assigned to after object construction (JLS ยง17.5).
	FIELD_ACC_VOLATILE  AccessFlag = 0x0040 //Declared volatile; cannot be cached.
	FIELD_ACC_TRANSIENT AccessFlag = 0x0080 //Declared transient; not written or read by a persistent object manager.
	FIELD_ACC_SYNTHETIC AccessFlag = 0x1000 //Declared synthetic; not present in the source code.
	FIELD_ACC_ENUM      AccessFlag = 0x4000 //Declared as an element of an enum class.ACC_PUBLIC	0x0001	Declared public; may be accessed from outside its package.

)

// Class access and property flags

const (
	CLASS_ACC_PUBLIC     AccessFlag = 0x0001 //Declared public; may be accessed from outside its package.
	CLASS_ACC_FINAL      AccessFlag = 0x0010 //Declared final; no subclasses allowed.
	CLASS_ACC_SUPER      AccessFlag = 0x0020 //Treat superclass methods specially when invoked by the invokespecial instruction.
	CLASS_ACC_INTERFACE  AccessFlag = 0x0200 //Is an interface, not a class.
	CLASS_ACC_ABSTRACT   AccessFlag = 0x0400 //Declared abstract; must not be instantiated.
	CLASS_ACC_SYNTHETIC  AccessFlag = 0x1000 //Declared synthetic; not present in the source code.
	CLASS_ACC_ANNOTATION AccessFlag = 0x2000 //Declared as an annotation interface.
	CLASS_ACC_ENUM       AccessFlag = 0x4000 //Declared as an enum class.
	CLASS_ACC_MODULE     AccessFlag = 0x8000 //Is a module, not a class or interface.
)

// Method access and property flags

const (
	METHOD_ACC_PUBLIC       AccessFlag = 0x0001 //Declared public; may be accessed from outside its package.
	METHOD_ACC_PRIVATE      AccessFlag = 0x0002 //Declared private; accessible only within the defining class and other classes belonging to the same nest (ยง5.4.4).
	METHOD_ACC_PROTECTED    AccessFlag = 0x0004 //Declared protected; may be accessed within subclasses.
	METHOD_ACC_STATIC       AccessFlag = 0x0008 //Declared static.
	METHOD_ACC_FINAL        AccessFlag = 0x0010 //Declared final; must not be overridden (ยง5.4.5).
	METHOD_ACC_SYNCHRONIZED AccessFlag = 0x0020 //Declared synchronized; invocation is wrapped by a monitor use.
	METHOD_ACC_BRIDGE       AccessFlag = 0x0040 //A bridge method, generated by the compiler.
	METHOD_ACC_VARARGS      AccessFlag = 0x0080 //Declared with variable number of arguments.
	METHOD_ACC_NATIVE       AccessFlag = 0x0100 //Declared native; implemented in a language other than the Java programming language.
	METHOD_ACC_ABSTRACT     AccessFlag = 0x0400 //Declared abstract; no implementation is provided.
	METHOD_ACC_STRICT       AccessFlag = 0x0800 //In a class file whose major version number is at least 46 and at most 60: Declared strictfp.
	METHOD_ACC_SYNTHETIC    AccessFlag = 0x1000 //Declared synthetic; not present in the source code.
)
